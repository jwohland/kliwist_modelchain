#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2022/03/03 05:43:45
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=cmip5.output1.NCC.NorESM1-M.rcp85.6hr.atmos.6hrLev.r1i1p1.v20110912|esgf-data1.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=cmip5.output1.NCC.NorESM1-M.rcp85.6hr.atmos.6hrLev.r1i1p1.v20110912|esgf-data1.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2080010100-2080063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2080010100-2080063018.nc' 'SHA256' 'bbd0875e7bec9576d4be85e6b4d49cc4baa06e485fd0b71dd93c11807bdd21ba'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2080070100-2080123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2080070100-2080123118.nc' 'SHA256' 'bcbba4ff7359d111770da281be84254bf4335785b8e9fd15376d89781c2bd9ce'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2081010100-2081063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2081010100-2081063018.nc' 'SHA256' '73ac663fa8346e20361f44b062684aa782aee7f6992efc2afc574c7c1a340a78'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2081070100-2081123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2081070100-2081123118.nc' 'SHA256' '4457765eacf8f6063c9877b8d0bfe6cfe816ffa99c895da98593c869e987f6de'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2082010100-2082063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2082010100-2082063018.nc' 'SHA256' 'd165b2b276ff5f8102c29712106ead85ea584d0730a9eacd1e69baf874be46d0'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2082070100-2082123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2082070100-2082123118.nc' 'SHA256' '06cccf209b421bb512832e644ab76d188c941f195c533fe84ad49e4fcebe3e2f'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2083010100-2083063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2083010100-2083063018.nc' 'SHA256' '18737f2efd7337b519a3176dcc13f53e10655dc979d12155ff34fa6a26b872d3'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2083070100-2083123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2083070100-2083123118.nc' 'SHA256' '25ba0eb0b99b29769cb585a80f51713a263565b4e6e2296435cea97b9d83fc76'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2084010100-2084063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2084010100-2084063018.nc' 'SHA256' '18d96ba4889d2cc4e80974a9389436225118bf77736e4b45626f543f48a9410e'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2084070100-2084123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2084070100-2084123118.nc' 'SHA256' '4797f8c51a795c6d009d2a1c525940c6f496e54e09a32877fa105a83bc361832'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2085010100-2085063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2085010100-2085063018.nc' 'SHA256' '04c6f94a65e22ce979f3e192a1aabce4ec40a50ff2ac50d2130ffeacafb648e1'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2085070100-2085123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2085070100-2085123118.nc' 'SHA256' '431def04082cea292124cde9a0b47c05bafef5bfc7759b76559831271db9cc30'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2086010100-2086063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2086010100-2086063018.nc' 'SHA256' '64024bb497e9b54c84bcc9a9dd5049449d0ab7c630c9df3a37f90a50ccd5f252'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2086070100-2086123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2086070100-2086123118.nc' 'SHA256' '603e7035aa5b449033a2356dd26723868610ef176c30d26447f20d645b00bc4b'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2087010100-2087063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2087010100-2087063018.nc' 'SHA256' 'ceaf784eb3212bfa05b017d9d6b773639f158bf354940032582d6da3c270ce05'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2087070100-2087123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2087070100-2087123118.nc' 'SHA256' 'd6cb0a05a65b6ce3a619df39463c4154cd8f1dd0c4e641a4c2e4f1660c809a15'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2088010100-2088063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2088010100-2088063018.nc' 'SHA256' '8b36cc33bb4ffe8ab4e8fc8b75e14b9af672ab42de45f1f81fa0cf8c219f89d2'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2088070100-2088123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2088070100-2088123118.nc' 'SHA256' '2a87cf74ef127279ede68df2785342a347f34c88a5db2d3e6e4bfd44323d2d5e'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2089010100-2089063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2089010100-2089063018.nc' 'SHA256' 'd5726260dceb784e3ef12be08ad72263d5fdcb74e62a0bb1d8b62b581e323337'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2089070100-2089123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2089070100-2089123118.nc' 'SHA256' '6c96fa718717ca02e25ffba16b40a9bcb6f85a544549d2c73b3842773a288ec6'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2090010100-2090063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2090010100-2090063018.nc' 'SHA256' 'ffbfd371d4faf35a5ed21fc45089a91746e48fd6cc551c14e919a1285cadf59b'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2090070100-2090123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2090070100-2090123118.nc' 'SHA256' '2a57dc974ef662e553c35e02504c4ffbbff1c103dbadb96d4e34ff4bc015c207'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2091010100-2091063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2091010100-2091063018.nc' 'SHA256' '4a37e0e8b60084c9da5848069e1e3db33596e80c2b66033632877cd23bfab40f'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2091070100-2091123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2091070100-2091123118.nc' 'SHA256' '20aba4d55544f3840354d94128fe02435418343942afe05f305d80255ba18915'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2092010100-2092063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2092010100-2092063018.nc' 'SHA256' '802cc0bb61a91e4b9eeb55aa1e318e340f036fe80f75042dca8599e5ff4e329a'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2092070100-2092123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2092070100-2092123118.nc' 'SHA256' 'a6a14303806a0a7e16d8ffa83b235c2dba11b213cdd44da4f8423c1c167393da'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2093010100-2093063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2093010100-2093063018.nc' 'SHA256' '71f5b2142b8b4496a1a6cf2cce49eacf079dc1d5f086b7ffc1bbbdcc27630fdc'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2093070100-2093123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2093070100-2093123118.nc' 'SHA256' 'a875263013bf2e02425ea84b4f308a61f66a1bb08679f5a05ed252d44ea40669'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2094010100-2094063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2094010100-2094063018.nc' 'SHA256' '838b4e73053eaae95e2b91251664ab105c24a5e946abbbcc6367251b30e83085'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2094070100-2094123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2094070100-2094123118.nc' 'SHA256' 'e26484d24287c0b9a4de71ded9c7093f2529cb5d8518089dd084f0cfeec5fb99'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2095010100-2095063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2095010100-2095063018.nc' 'SHA256' 'f56974e568f669c3e9d01d4fd1c8b9acdc6b9742f2ebab8d27c2c869d81d8c14'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2095070100-2095123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2095070100-2095123118.nc' 'SHA256' '937b629df2727ddddad829ce4ccf54aa8b43770fdc15228467c40e9584a9488f'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2096010100-2096063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2096010100-2096063018.nc' 'SHA256' 'b8bc6d0e5fad1f07ddbf7caf9f622e3c03b46cc88050c588a4cf1133409438b4'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2096070100-2096123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2096070100-2096123118.nc' 'SHA256' '67b2ff8441654ecf93defa769e58cc72a6b70c4661eacb6b5af766646562a4e7'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2097010100-2097063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2097010100-2097063018.nc' 'SHA256' 'f118c1f2ba4fdf91bf0419684aa93ce0a8d16a6efc4ec2588d9554c1cdaf9a9e'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2097070100-2097123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2097070100-2097123118.nc' 'SHA256' '14d84a4be4c4b06cfa27ed98d886bd7cfd8975848fcc52212b2dd4a01bc666d5'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2098010100-2098063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2098010100-2098063018.nc' 'SHA256' 'd356ec2c268fbe6805210851a90916acc6e1f758b2cd6c1833b4480cfd11f794'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2098070100-2098123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2098070100-2098123118.nc' 'SHA256' '93459ae5b716e1c69e4eddd418318f8d2d78dbb31a81b5679f8cd3ef12c0d694'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2099010100-2099063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2099010100-2099063018.nc' 'SHA256' 'c9e0e204232e870b3d1978ff1f79d52317ad6c6c30d6b81485b9eb7fd354b5b3'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2099070100-2099123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2099070100-2099123118.nc' 'SHA256' 'bb3e6b536095fc3d6af317bcbcdbb2bf3e7e9130817d26f73e3748916ffa2278'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2100010100-2100063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2100010100-2100063018.nc' 'SHA256' '9fd137bd9c5d0bdf526b4ccb3475fe7eaa9af46a6cbf3fc65f4fda4204294e77'
'ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2100070100-2100123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/ua/ua_6hrLev_NorESM1-M_rcp85_r1i1p1_2100070100-2100123118.nc' 'SHA256' '4342a1e318ef080e769ca6b920b8b36043568cd383574755a050679de836c283'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2080010100-2080063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2080010100-2080063018.nc' 'SHA256' '97640a58bce5d408cfb3348f28aea8965ba455daed1fb02b99e626fc1f2e626d'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2080070100-2080123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2080070100-2080123118.nc' 'SHA256' '37cdfeb2c98ca50c55c9086920ce8d18ab883bdc56af02c3de90d2deb147ee4f'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2081010100-2081063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2081010100-2081063018.nc' 'SHA256' '19b7f56c3115ea760dcc65cb6296b345b73aa218ca9c49c74442dad0fefae551'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2081070100-2081123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2081070100-2081123118.nc' 'SHA256' '4eaad052d3d74e35276671ab7526d9ff31021cf7b58e654a17a84446373ba1e1'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2082010100-2082063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2082010100-2082063018.nc' 'SHA256' '91e397e4b11d315fc2ecfda7092b2dfc1dce7c8739c28e958dba7243f990606b'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2082070100-2082123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2082070100-2082123118.nc' 'SHA256' '5cefb79dc3d45bfd902648b72e565f9550e99771b0b8914c3de513d0792e7564'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2083010100-2083063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2083010100-2083063018.nc' 'SHA256' 'c1ef9fa31e17fdeae89053790543ac0f53a86c621dca1c05720e14c9502332e3'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2083070100-2083123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2083070100-2083123118.nc' 'SHA256' '25d972abb20d5f00ccde6496c3f2eca7cf8050ea79a39321a95cf9a9ee4b84f1'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2084010100-2084063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2084010100-2084063018.nc' 'SHA256' '61dff6f645e39f186bd3d1ae95341f1bcae04f423c04bc6d3246141ea828a208'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2084070100-2084123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2084070100-2084123118.nc' 'SHA256' '2a1f39dc83a1c8f7ecf7165cb65bc8d33aceaecf28b7ef20b5f74c958ee5c5da'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2085010100-2085063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2085010100-2085063018.nc' 'SHA256' '8452592718154d85ec7bb2b4e97ca6eb21e33e3435ee12f8b30b3c6d720c0e19'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2085070100-2085123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2085070100-2085123118.nc' 'SHA256' 'c37a08e5b9f055eb0f1a7f2a2a9921f28fe93764c0a532c96d3e1c910bef886b'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2086010100-2086063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2086010100-2086063018.nc' 'SHA256' '62f6edcfb700c9212ec423bb205f2410c4eb6271738d471f001584e54bc17afd'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2086070100-2086123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2086070100-2086123118.nc' 'SHA256' '0c5d24ff22855d5485ccb43d422f6a49e80f5c5ac5e44f5afc89bcc57b165bb8'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2087010100-2087063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2087010100-2087063018.nc' 'SHA256' '81fbb773d29b68cb029f066495ea49af7ede3410a9ead83ed2a84bfd73c1472a'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2087070100-2087123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2087070100-2087123118.nc' 'SHA256' 'ffc512138de190b7cb3e29ef9a0ea709e1a6dca61eadf9f02718f0131b4c77c8'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2088010100-2088063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2088010100-2088063018.nc' 'SHA256' 'bf457b23c8350c675664edec09030f217f51057db4fd46d03109d26b13b4015b'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2088070100-2088123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2088070100-2088123118.nc' 'SHA256' 'ad6082c87daa2e5af391de61373032a0c7e39b494a860aa94fb73cc38f360dea'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2089010100-2089063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2089010100-2089063018.nc' 'SHA256' '68459d6c0b670ecd7bf1e53890b1f583bf73bbe2f5cdd278516e9e78030c909b'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2089070100-2089123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2089070100-2089123118.nc' 'SHA256' '53803a95d8fb15e94cce38a664b9bf77fee6cf3318c4c84833eba91631c0cb95'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2090010100-2090063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2090010100-2090063018.nc' 'SHA256' 'd2d7b6521b05e81fd4e1dd6e074dbf09e930d17e79503e741f11b4cb53a71b85'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2090070100-2090123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2090070100-2090123118.nc' 'SHA256' 'e2ea6e1faf741ecf91bca5e32b627d342b4d70ccb8d5d33250f9d56acf6e52d1'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2091010100-2091063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2091010100-2091063018.nc' 'SHA256' '198f077c5750c364d48355d41c1879c61d375220a036413e97a1f60bafa32fe3'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2091070100-2091123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2091070100-2091123118.nc' 'SHA256' '8b1b69fe16141eccf35ad32dba5c45acc1dc5a4ff51935ae355df7ba8e79ae4d'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2092010100-2092063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2092010100-2092063018.nc' 'SHA256' 'd57c4da240c602e2ec8d35f29c6d97775a4c62e9e9d8bee91c06b58e3425def9'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2092070100-2092123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2092070100-2092123118.nc' 'SHA256' 'b0e8a9dd1b037248e01a2193a74d5bd69b784ced7ba86fcb9b738c13fa9affaf'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2093010100-2093063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2093010100-2093063018.nc' 'SHA256' '78521812fb3d726747883974bf52ddf4fd289a099dd29d5ae4e30acdf3b664e8'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2093070100-2093123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2093070100-2093123118.nc' 'SHA256' '36af0bc5494eec935a7e022b7cad162dd1cdfb87e0b6a6d3ea8fa5a7de2d2359'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2094010100-2094063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2094010100-2094063018.nc' 'SHA256' '48556810bb66dd8420c9fe52f14f486833f4127bf5b388dd746afb1f1728a1fc'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2094070100-2094123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2094070100-2094123118.nc' 'SHA256' 'ddd1127101e1b8dafae7e126897622784ff9b8c68da2f54b160fa018e5fc78c3'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2095010100-2095063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2095010100-2095063018.nc' 'SHA256' '3d49ec25031b984b84cf159d188615e3e0e8110b143312a7ea0aa094bef2fe07'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2095070100-2095123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2095070100-2095123118.nc' 'SHA256' 'e73b8249de6a259905bb14a6e71297202d68bad1bf860e371c1485acf491c18d'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2096010100-2096063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2096010100-2096063018.nc' 'SHA256' '261c53d0c90e8c2bfdacf9b14e9edf5ca55bd0b3b96cfe88f9d93634d4346ae9'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2096070100-2096123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2096070100-2096123118.nc' 'SHA256' '2624676fd6a44ff2e5914079f56ddbd244f71d5b318158671c070e5435206083'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2097010100-2097063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2097010100-2097063018.nc' 'SHA256' '309fd83b5b35d5b71f9ac9d90e0620f80d9c99479b5dc7d2e2d3e4310ab1d3ee'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2097070100-2097123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2097070100-2097123118.nc' 'SHA256' 'a016f2026ba7e3dd129ec40aeb20e5b7f51a14d15e41e9a0a23bb83ba2fab483'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2098010100-2098063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2098010100-2098063018.nc' 'SHA256' 'a067ba630bfeb49add07e8a210c4138aa29f84cb7610108ab21ed4ee4ffdeb79'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2098070100-2098123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2098070100-2098123118.nc' 'SHA256' 'd80ac57e17549c73012f1dbb2b0dd950581a619cd4cbe14e268e848e611cd214'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2099010100-2099063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2099010100-2099063018.nc' 'SHA256' 'f402a60542d83e9ec4f440e0474d8358695e408f34d3ec4f710b7ecadcc2a9de'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2099070100-2099123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2099070100-2099123118.nc' 'SHA256' '2fc660384b087e0c62864b8edfe5b59efb9766b6f0b7c1c772f88764a31131c1'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2100010100-2100063018.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2100010100-2100063018.nc' 'SHA256' 'f4379541eb0b31954864e0b89dd4ad1b69ce73136e2544d78d2ab95772c9e47c'
'va_6hrLev_NorESM1-M_rcp85_r1i1p1_2100070100-2100123118.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/NCC/NorESM1-M/rcp85/6hr/atmos/6hrLev/r1i1p1/v20110912/va/va_6hrLev_NorESM1-M_rcp85_r1i1p1_2100070100-2100123118.nc' 'SHA256' '5ff0a1d5fa8d2c8c4c3cbc0d028fdbf0bd6ef8214785b533f0f624913d89b03b'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 770 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
